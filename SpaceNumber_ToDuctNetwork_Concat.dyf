<Workspace Version="1.3.2.2480" X="0" Y="0" zoom="1" ScaleFactor="1" Name="SpaceNumber_ToDuctNetwork_Concat" Description="labels ductwork by spaces" ID="95ba2cc7-7978-4666-8c4b-0d185db96cfb" Category="ArupBimSF.Revit.Mep_Spaces">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="50cb9078-bc75-4340-bc8e-c3154237a7f6" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1117" y="297" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="71ccf556-ced3-44df-b8a2-c5714e567c35" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="994" y="301" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="8778e5b0-1a77-441e-8228-39bdb531b6b7" type="PythonNodeModels.PythonNode" nickname="Python Script" x="823" y="298" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script>
import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
#The inputs to this node will be stored as a list in the IN variables.
if isinstance(IN[0], list):
	elements = UnwrapElement(IN[0])
else:
	elements = [UnwrapElement(IN[0])]
	
def getSize(x):
	try:
		conns = x.ConnectorManager.Connectors
	except:
		conns = x.MEPModel.ConnectorManager.Connectors
	maxsize = 0
	for c in conns:
		if c.Shape == ConnectorProfileType.Round:
			startsize = c.Radius * 2
		elif c.Shape == ConnectorProfileType.Invalid:
			continue
		else:
			area = c.Width * c.Height
			startsize = (math.sqrt(area/math.pi) * 2)
		if startsize &gt; maxsize:
			maxsize = startsize
	return maxsize
	
phaseId = elements[0].CreatedPhaseId
phase = doc.GetElement(phaseId)
name = IN[1]
if isinstance(IN[2], list):
	category = UnwrapElement(IN[2])
else:
	category = [UnwrapElement(IN[2])]
	
factor = IN[3]

catIds = []
for c in category:
	catIds.append(c.Id)

def checkParameter(param):
	for p in param:
		internal = p.Definition
		if internal.BuiltInParameter != BuiltInParameter.INVALID:
			return p
	return param[0]


def nextElement(elem,sys):
	sysname = next.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString()
	for s in sysname.split(","):
		if s in sys.split(","):
			break
	else:
		return 4
	if "Return Air" in sysname:
		direction = FlowDirectionType.In
	else:
		direction = FlowDirectionType.Out
	try:
		connectors = elem.ConnectorManager.Connectors
		for conn in connectors:
			if conn.Domain != Domain.DomainHvac:
				continue
			elif conn.Direction == direction:
				continue
			else:
				endconn = conn
		for c in endconn.AllRefs:
			if c.Owner.Id.Equals(elem.Id):
				continue
			elif c.Owner.GetType() == Mechanical.MechanicalSystem:
				return 0
			else:
				newelem = c.Owner
		return newelem
	except AttributeError:
		connectors = elem.MEPModel.ConnectorManager.Connectors
		if connectors.Size == 1:
			for conn in connectors:
				if conn.Domain != Domain.DomainHvac:
					continue
				endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem:
						return 1
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem:
					continue
				else:
					newelem = c.Owner
			return newelem
		elif connectors.Size == 2:
			for conn in connectors:
				if conn.Domain != Domain.DomainHvac:
					continue
				if conn.Direction == direction:
					continue
				else:
					endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem:
						return 2
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem:
					continue
				else:
					newelem = c.Owner
			return newelem
		else:
			for conn in connectors:
				if conn.Domain != Domain.DomainHvac:
					continue
				if conn.Direction != direction:
					endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem:
						return 3
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem:
					continue
				else:
					newelem = c.Owner
			return newelem



listout = []
result = []
for j,x in enumerate(elements):
	ids = []
	space = x.Space[phase]
	if space == None:
		listout.append("ElementId "+str(x.Id)+" is not in a space")
		continue
	spacenumber = space.Number
	sysclass = x.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString()
	startsize = getSize(x)
	next = x
	i = 0
	while True:
		if i &gt; 1000:
			break
		try:
			next = nextElement(next,sysclass)
		except:
			result.append("error")
			break
		if isinstance(next, int):
			result.append("can't get next element")
			i += 1
			break
		i += 1
		nextsize = getSize(next)
		if nextsize &gt; startsize * factor:
			result.append("size end")
			break
		if next.Category.Id not in catIds:
			i += 1
			continue
		if next.Id in ids:
			result.append("double element")
			break
		p = next.GetParameters(name)
		if len(p) == 0:
			result.append("no param")
			break
		else:
			param = checkParameter(p)
		elem_num = param.AsString()
		if spacenumber in str(elem_num):
			continue
		else:
			if elem_num == "" or elem_num == None:
				newvalue = spacenumber
			else:
				newvalue = elem_num +","+ spacenumber
			TransactionManager.Instance.EnsureInTransaction(doc)
			param.Set(newvalue)
			TransactionManager.Instance.TransactionTaskDone()
			ids.append(next.Id)
	listout.append(x)

#Assign your output to the OUT variable.
OUT = listout, result</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="2157f9f5-9d7c-47e5-bd58-436f6e6f1ad8" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="551" y="275" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Air Terminals" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="1ad7ba7b-cc22-45fa-afd4-1cedaa74b676" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="469" y="353" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ParameterName: string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b7db5473-f3ce-43c1-84c2-1beac35c8ae9" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="495" y="431" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Category" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0a81e8fc-214b-49ee-a125-ef236452e5b3" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="443" y="524" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="SizeLimitFactor: int = 20" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="71ccf556-ced3-44df-b8a2-c5714e567c35" start_index="0" end="50cb9078-bc75-4340-bc8e-c3154237a7f6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="8778e5b0-1a77-441e-8228-39bdb531b6b7" start_index="0" end="71ccf556-ced3-44df-b8a2-c5714e567c35" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2157f9f5-9d7c-47e5-bd58-436f6e6f1ad8" start_index="0" end="8778e5b0-1a77-441e-8228-39bdb531b6b7" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1ad7ba7b-cc22-45fa-afd4-1cedaa74b676" start_index="0" end="8778e5b0-1a77-441e-8228-39bdb531b6b7" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b7db5473-f3ce-43c1-84c2-1beac35c8ae9" start_index="0" end="8778e5b0-1a77-441e-8228-39bdb531b6b7" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0a81e8fc-214b-49ee-a125-ef236452e5b3" start_index="0" end="8778e5b0-1a77-441e-8228-39bdb531b6b7" end_index="3" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>