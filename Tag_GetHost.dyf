<Workspace Version="1.3.2.2480" X="464.328590206367" Y="516.393746476538" zoom="0.487018596318345" ScaleFactor="1" Name="Tag_GetHost" Description="^^^FixMe_Not Working.... find origin (data shapes or battle bim) Input tags to get their host elements." ID="e8e97278-b218-4c76-80f3-28d523a1a605" Category="ArupBimSF.Revit.Tags">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="01e38d8f-eec6-4c09-aaa3-43b27cc5d0e0" type="PythonNodeModels.PythonNode" nickname="Python Script" x="980.143767192703" y="322.703335092496" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

# Import DocumentManager and TransactionManager
clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument

# Import RevitAPI
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

if isinstance(IN[0], list):
	elem = [UnwrapElement(i) for i in IN[0]]
else:
	elem = [UnwrapElement(IN[0])]

def ProcessList(_func, _list):
    return map( lambda x:
    process_list(_func, x) if type(x)==list else _func(x), _list )

def GetHostElement(tag):
	doc = DocumentManager.Instance.CurrentDBDocument
	hostElemId = tag.TaggedLocalElementId
	hostElem = doc.GetElement(hostElemId)
	return hostElem

try:
	errorReport = None
	output = ProcessList(GetHostElement, elem)
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()

#Assign your output to the OUT variable
if errorReport == None:
	OUT = output
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="f095fac0-2873-4fb7-bbb6-e2076235671c" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1151.57301381955" y="329.670395157787" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="59b08a64-42bd-442d-9105-595ec562de4f" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="850.429246626844" y="316.967060065291" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Tag" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="01e38d8f-eec6-4c09-aaa3-43b27cc5d0e0" start_index="0" end="f095fac0-2873-4fb7-bbb6-e2076235671c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="59b08a64-42bd-442d-9105-595ec562de4f" start_index="0" end="01e38d8f-eec6-4c09-aaa3-43b27cc5d0e0" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>