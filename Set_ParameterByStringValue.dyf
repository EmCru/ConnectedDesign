<Workspace Version="1.3.2.2480" X="-269" Y="-128" zoom="1" ScaleFactor="1" Name="Set_ParameterByStringValue" Description="Allows you to set parameter values by strings instead of using project units.  Useful for using Excel to port in values or from parameters used to store values as strings_!Pa_!el^TestMe" ID="38762d8c-da64-46a8-a0a0-7bffbaa00f3b" Category="ArupBimSF.Revit.Parameters">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="73481b17-18f9-491e-b297-1380d3010def" type="PythonNodeModels.PythonNode" nickname="Python Script" x="928" y="413" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument
#The inputs to this node will be stored as a list in the IN variables.
toggle = 0
if isinstance(IN[0], list):
	element = UnwrapElement(IN[0])
else:
	element = [UnwrapElement(IN[0])]
name = IN[1]
if isinstance(IN[2], list):
	values = IN[2]
	toggle = 1
else:
	values = [IN[2]]
parameters = []
listout = []


def checkParameter(param):
	for p in param:
		internal = p.Definition
		if internal.BuiltInParameter != BuiltInParameter.INVALID:
			return p
	return param[0]

for e in element:
	param = e.GetParameters(name)
	if len(param) == 0:
		parameters.append(None)
	else:
		p = checkParameter(param)
		if p.StorageType == StorageType.ElementId:
			parameters.append(None)
		else:
			parameters.append(p)

if toggle == 1:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		else:
			p.SetValueString(values[i])
			listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()
else:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		else:
			try:
				p.SetValueString(values)
				listout.append(element[i])
			except:
				p.SetValueString(values[0])
				listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()

#Assign your output to the OUT variable.
OUT = listout</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9a27ed4f-769a-4f7b-91a3-5b24e7a07454" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="747" y="393" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="c74f18ec-f23c-471d-b06f-5e4613fc744d" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="650" y="454" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ParameterName : string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="75921254-1890-4440-83a7-00f3c4429a62" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="696" y="532" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Values : string[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="ff0fbb5f-6b11-41c2-95ad-55dce2cb9189" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1146" y="411" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="73481b17-18f9-491e-b297-1380d3010def" start_index="0" end="ff0fbb5f-6b11-41c2-95ad-55dce2cb9189" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9a27ed4f-769a-4f7b-91a3-5b24e7a07454" start_index="0" end="73481b17-18f9-491e-b297-1380d3010def" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c74f18ec-f23c-471d-b06f-5e4613fc744d" start_index="0" end="73481b17-18f9-491e-b297-1380d3010def" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="75921254-1890-4440-83a7-00f3c4429a62" start_index="0" end="73481b17-18f9-491e-b297-1380d3010def" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
</Workspace>